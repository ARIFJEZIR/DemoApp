import Foundation
typealias LoginCallBack = (_ loginStatus: Bool) -> Void
class LoginVM: NSObject {
    
    func userLogin(params: [String: Any]?,callback: @escaping LoginCallBack){
        APIManager.shared.login(userParams: params) { (response, error) in
            let status = self.isStatusOK(json: response)
            if status.isOk{
                
                let login = LoginModel(fromDictionary: (response as? [String: Any])!)
               USERDEFAULTS.saveLoginDetails(logininfo: login.data.toDictionary())
                USERDEFAULTS.saveAuthToken(token: login.data.token)
                USERDEFAULTS.saveEmailID(emailID: login.data.email)
                USERDEFAULTS.saveUserID(userID: login.data.userId)
                USERDEFAULTS.saveFirstName(studentName: login.data.firstName)
                USERDEFAULTS.saveLastName(staffName: login.data.lastName)
                USERDEFAULTS.saveProfileImage(img:login.data.profileImage )
                USERDEFAULTS.savePhoneNumber(ph: login.data.phoneNumber)
                 callback(true)
            }
            else{
                callback(false)
            }
        }
        
    }
    
    func getData(params: [String: Any]?,isProgress: Bool,callback: @escaping LoginCallBack){
    let header = ["x-auth-token":USERDEFAULTS.getAuthToken()]
        APIManager.shared.getRequest(stringApi: HomeAPI.getExperienceURL,parameters: params, headers: header,isProgress: isProgress)  { (response, error) in
        let status = self.isStatusOK(json: response)
        if status.isOk{
            let home = HomeModel(fromDictionary: (response as? [String: Any])!)
            self.experience = home.data.experience
            self.home = home.data
            callback(true)
        }
        else{
            callback(false)
        }
    }
}

   func getProfile(params: [String: Any]?,callback: @escaping ProfileUpdateCallBack){
        let header = ["x-auth-token":USERDEFAULTS.getAuthToken()]
        APIManager.shared.getRequest(stringApi: ProfileUpdate.getProfile + params!.stringFromHttpParameters(), headers: header)  { (response, error) in
            let status = self.isStatusOK(json: response)
            if status.isOk{
                let profile = ProfileModel(fromDictionary: (response as? [String: Any])!)
                self.profile = profile.data
                callback(true)
            }
            else{
                callback(false)
            }
        }
    }
    
    func updateImage( uploads: [FileUpload], params: [String: Any],callback: @escaping ProfileUpdateCallBack){
        let header = ["x-auth-token":USERDEFAULTS.getAuthToken()]
        APIManager.shared.updateImageandVoice(stringAPI: ProfileUpdate.profileURL , uploads: uploads, params: params, headers: header) { (response, error) in
            let status = self.isStatusOK(json: response)
            if status.isOk{
                let login = ProfileModel(fromDictionary:(response as? [String: Any])!)
                USERDEFAULTS.saveLoginDetails(logininfo: login.data.toDictionary())
                callback(true)
            }else{
                callback(false)
            }
        }
}
